from challenges_utils import validator_print, validator_var, validator_input_print, validator_contains
from challenges_utils import robust_validator
CHALLENGES_AVANCADOS = [
    # ========================
    # POO (3 pontos)
    # ========================
    {
        "id": "ava-poo-1",
        "level": "Avançado",
        "topic": "POO (3 pontos)",
        "icon": '<i class="fa-solid fa-cube"></i>',
        "description": '<i class="fa-solid fa-cube"></i> Crie uma classe Pessoa com atributo nome. Instancie com nome "Ana" e mostre.',
        "starter_code": "class Pessoa:\n    def __init__(self, nome):\n        self.nome = nome\n\np = Pessoa('Ana')\nprint()",
        "tip": 'print(p.nome)',
        "validator": lambda code: validator_print(code, "Ana"),
        "points": 3,
    },
    {
        "id": "ava-poo-2",
        "level": "Avançado",
        "topic": "POO (3 pontos)",
        "icon": '<i class="fa-solid fa-cube"></i>',
        "description": '<i class="fa-solid fa-cube"></i> Crie uma classe Carro com atributo modelo e um método mostrar_modelo().',
        "starter_code": "class Carro:\n    def __init__(self, modelo):\n        self.modelo = modelo\n\n    def mostrar_modelo(self):\n        \n\nc = Carro('Fusca')\nc.mostrar_modelo()",
        "tip": 'print(self.modelo)',
        "validator": lambda code: validator_print(code + "\nc = Carro('Fusca')\nc.mostrar_modelo()", "Fusca"),
        "points": 3,
    },
    {
        "id": "ava-poo-3",
        "level": "Avançado",
        "topic": "POO (3 pontos)",
        "icon": '<i class="fa-solid fa-cube"></i>',
        "description": '<i class="fa-solid fa-cube"></i> Crie uma classe Conta com atributo saldo e método depositar(valor).',
        "starter_code": "class Conta:\n    def __init__(self, saldo=0):\n        self.saldo = saldo\n    def depositar(self, valor):\n        \n\nc = Conta()\nc.depositar(100)\nprint()",
        "tip": 'self.saldo += valor',
        "validator": lambda code: validator_print(code, "100"),
        "points": 3,
    },
    {
        "id": "ava-poo-4",
        "level": "Avançado",
        "topic": "POO (3 pontos)",
        "icon": '<i class="fa-solid fa-cube"></i>',
        "description": '<i class="fa-solid fa-cube"></i> Crie uma classe Animal com método falar(). Faça um cachorro herdar e imprimir "Au Au".',
        "starter_code": "class Animal:\n    def falar(self):\n        pass\n\nclass Cachorro(Animal):\n    def falar(self):\n        \n\nc = Cachorro()\nc.falar()",
        "tip": 'print("Au Au")',
        "validator": lambda code: validator_print(code + "\nc = Cachorro()\nc.falar()", "Au Au"),
        "points": 3,
    },
    {
        "id": "ava-poo-5",
        "level": "Avançado",
        "topic": "POO (3 pontos)",
        "icon": '<i class="fa-solid fa-cube"></i>',
        "description": '<i class="fa-solid fa-cube"></i> Crie uma classe Retangulo com método area() que retorna base * altura.',
        "starter_code": "class Retangulo:\n    def __init__(self, base, altura):\n        self.base = base\n        self.altura = altura\n    def area(self):\n        \n\nr = Retangulo(2, 5)\nprint()",
        "tip": 'return self.base * self.altura',
        "validator": lambda code: validator_print(code + "\nr = Retangulo(2,5)\nprint(r.area())", "10"),
        "points": 3,
    },

    # ========================
    # Manipulação de Arquivos (3 pontos)
    # ========================
    {
        "id": "ava-arq-1",
        "level": "Avançado",
        "topic": "Manipulação de Arquivos (3 pontos)",
        "icon": '<i class="fa-solid fa-file-lines"></i>',
        "description": '<i class="fa-solid fa-file-lines"></i> Crie um arquivo "arq.txt", escreva "Olá" e feche.',
        "starter_code": 'with open("arq.txt", "w") as f:\n    ',
        "tip": 'f.write("Olá")',
        "validator": lambda code: validator_contains(code, 'write("Olá")'),
        "points": 3,
    },
    {
        "id": "ava-arq-2",
        "level": "Avançado",
        "topic": "Manipulação de Arquivos (3 pontos)",
        "icon": '<i class="fa-solid fa-file-lines"></i>',
        "description": '<i class="fa-solid fa-file-lines"></i> Leia o conteúdo do arquivo "arq.txt" e mostre.',
        "starter_code": 'with open("arq.txt") as f:\n    conteudo = f.read()\nprint()',
        "tip": 'print(conteudo)',
        "validator": lambda code: validator_contains(code, "read") and validator_contains(code, "print"),
        "points": 3,
    },
    {
        "id": "ava-arq-3",
        "level": "Avançado",
        "topic": "Manipulação de Arquivos (3 pontos)",
        "icon": '<i class="fa-solid fa-file-lines"></i>',
        "description": '<i class="fa-solid fa-file-lines"></i> Acrescente "Mundo" ao arquivo "arq.txt".',
        "starter_code": 'with open("arq.txt", "a") as f:\n    ',
        "tip": 'f.write("Mundo")',
        "validator": lambda code: validator_contains(code, 'write("Mundo")'),
        "points": 3,
    },
    {
        "id": "ava-arq-4",
        "level": "Avançado",
        "topic": "Manipulação de Arquivos (3 pontos)",
        "icon": '<i class="fa-solid fa-file-lines"></i>',
        "description": '<i class="fa-solid fa-file-lines"></i> Conte o número de linhas do arquivo "arq.txt".',
        "starter_code": 'with open("arq.txt") as f:\n    linhas = f.readlines()\nprint()',
        "tip": 'print(len(linhas))',
        "validator": lambda code: validator_contains(code, "readlines") and validator_contains(code, "len"),
        "points": 3,
    },
    {
        "id": "ava-arq-5",
        "level": "Avançado",
        "topic": "Manipulação de Arquivos (3 pontos)",
        "icon": '<i class="fa-solid fa-file-lines"></i>',
        "description": '<i class="fa-solid fa-file-lines"></i> Apague o arquivo "arq.txt".',
        "starter_code": 'import os\nos.remove()',
        "tip": 'os.remove("arq.txt")',
        "validator": lambda code: validator_contains(code, 'remove("arq.txt")'),
        "points": 3,
    },

    # ========================
    # Exceptions (3 pontos)
    # ========================
    {
        "id": "ava-exc-1",
        "level": "Avançado",
        "topic": "Exceptions (3 pontos)",
        "icon": '<i class="fa-solid fa-triangle-exclamation"></i>',
        "description": '<i class="fa-solid fa-triangle-exclamation"></i> Capture a exceção ao dividir por zero.',
        "starter_code": "try:\n    print(1/0)\nexcept Exception as e:\n    print()",
        "tip": 'print("Erro")',
        "validator": lambda code: validator_contains(code, "except"),
        "points": 3,
    },
    {
        "id": "ava-exc-2",
        "level": "Avançado",
        "topic": "Exceptions (3 pontos)",
        "icon": '<i class="fa-solid fa-triangle-exclamation"></i>',
        "description": '<i class="fa-solid fa-triangle-exclamation"></i> Peça um número e trate erro se não for inteiro.',
        "starter_code": "try:\n    n = int(input())\nexcept:\n    print()",
        "tip": 'print("Valor inválido")',
        "validator": lambda code: validator_input_print(code, "abc\n", "Valor inválido"),
        "points": 3,
    },
    {
        "id": "ava-exc-3",
        "level": "Avançado",
        "topic": "Exceptions (3 pontos)",
        "icon": '<i class="fa-solid fa-triangle-exclamation"></i>',
        "description": '<i class="fa-solid fa-triangle-exclamation"></i> Crie uma função que lança ValueError se o número for negativo.',
        "starter_code": "def verifica(n):\n    ",
        "tip": 'if n < 0: raise ValueError("Negativo")',
        "validator": lambda code: validator_contains(code, "raise ValueError"),
        "points": 3,
    },
    {
        "id": "ava-exc-4",
        "level": "Avançado",
        "topic": "Exceptions (3 pontos)",
        "icon": '<i class="fa-solid fa-triangle-exclamation"></i>',
        "description": '<i class="fa-solid fa-triangle-exclamation"></i> Use finally para mostrar "Fim" independente de erro.',
        "starter_code": "try:\n    x = 1/0\nexcept:\n    pass\nfinally:\n    print()",
        "tip": 'print("Fim")',
        "validator": lambda code: validator_contains(code, "finally") and validator_contains(code, 'print("Fim")'),
        "points": 3,
    },
    {
        "id": "ava-exc-5",
        "level": "Avançado",
        "topic": "Exceptions (3 pontos)",
        "icon": '<i class="fa-solid fa-triangle-exclamation"></i>',
        "description": '<i class="fa-solid fa-triangle-exclamation"></i> Capture o erro KeyError ao acessar chave inexistente em dicionário.',
        "starter_code": "d = {}\ntry:\n    print(d['x'])\nexcept KeyError:\n    print()",
        "tip": 'print("Chave não existe")',
        "validator": lambda code: validator_contains(code, "except KeyError"),
        "points": 3,
    },

    # ========================
    # List Comprehension (3 pontos)
    # ========================
    {
        "id": "ava-listcomp-1",
        "level": "Avançado",
        "topic": "List Comprehension (3 pontos)",
        "icon": '<i class="fa-solid fa-layer-group"></i>',
        "description": '<i class="fa-solid fa-layer-group"></i> Crie uma lista com os quadrados de 1 a 5 usando list comprehension.',
        "starter_code": "lista = [",
        "tip": 'x**2 for x in range(1,6)]',
        "validator": lambda code: validator_contains(code, "**2"),
        "points": 3,
    },
    {
        "id": "ava-listcomp-2",
        "level": "Avançado",
        "topic": "List Comprehension (3 pontos)",
        "icon": '<i class="fa-solid fa-layer-group"></i>',
        "description": '<i class="fa-solid fa-layer-group"></i> Crie uma lista com apenas pares de 0 a 10 usando list comprehension.',
        "starter_code": "pares = [",
        "tip": 'x for x in range(0,11) if x%2==0]',
        "validator": lambda code: validator_contains(code, "if x%2==0"),
        "points": 3,
    },
    {
        "id": "ava-listcomp-3",
        "level": "Avançado",
        "topic": "List Comprehension (3 pontos)",
        "icon": '<i class="fa-solid fa-layer-group"></i>',
        "description": '<i class="fa-solid fa-layer-group"></i> Crie uma lista com o comprimento das palavras ["a", "bb", "ccc"] usando list comprehension.',
        "starter_code": "palavras = ['a', 'bb', 'ccc']\ncomprimentos = [",
        "tip": 'len(p) for p in palavras]',
        "validator": lambda code: validator_contains(code, "len("),
        "points": 3,
    },
    {
        "id": "ava-listcomp-4",
        "level": "Avançado",
        "topic": "List Comprehension (3 pontos)",
        "icon": '<i class="fa-solid fa-layer-group"></i>',
        "description": '<i class="fa-solid fa-layer-group"></i> Crie uma lista de tuplas (x, x*2) para x de 1 a 3 usando list comprehension.',
        "starter_code": "lista = [",
        "tip": '(x, x*2) for x in range(1,4)]',
        "validator": lambda code: validator_contains(code, "x*2"),
        "points": 3,
    },
    {
        "id": "ava-listcomp-5",
        "level": "Avançado",
        "topic": "List Comprehension (3 pontos)",
        "icon": '<i class="fa-solid fa-layer-group"></i>',
        "description": '<i class="fa-solid fa-layer-group"></i> Inverta as palavras de uma lista usando list comprehension: ["abc", "de"].',
        "starter_code": "palavras = ['abc', 'de']\ninvertidas = [",
        "tip": 'p[::-1] for p in palavras]',
        "validator": lambda code: validator_contains(code, "[::-1]"),
        "points": 3,
    },

    # ========================
    # Funções Avançadas (4 pontos)
    # ========================
    {
        "id": "ava-func-1",
        "level": "Avançado",
        "topic": "Funções Avançadas (4 pontos)",
        "icon": '<i class="fa-solid fa-bolt"></i>',
        "description": '<i class="fa-solid fa-bolt"></i> Crie uma função lambda que retorna o quadrado de um número.',
        "starter_code": "quadrado = ",
        "tip": 'lambda x: x*x',
        "validator": lambda code: validator_contains(code, "lambda"),
        "points": 4,
    },
    {
        "id": "ava-func-2",
        "level": "Avançado",
        "topic": "Funções Avançadas (4 pontos)",
        "icon": '<i class="fa-solid fa-bolt"></i>',
        "description": '<i class="fa-solid fa-bolt"></i> Use map para dobrar os valores da lista [1,2,3].',
        "starter_code": "lista = [1,2,3]\ndobrados = list(map(",
        "tip": 'lambda x: x*2, lista))',
        "validator": lambda code: validator_contains(code, "map"),
        "points": 4,
    },
    {
        "id": "ava-func-3",
        "level": "Avançado",
        "topic": "Funções Avançadas (4 pontos)",
        "icon": '<i class="fa-solid fa-bolt"></i>',
        "description": '<i class="fa-solid fa-bolt"></i> Use filter para pegar só os pares da lista [1,2,3,4].',
        "starter_code": "lista = [1,2,3,4]\npares = list(filter(",
        "tip": 'lambda x: x%2==0, lista))',
        "validator": lambda code: validator_contains(code, "filter"),
        "points": 4,
    },
    {
        "id": "ava-func-4",
        "level": "Avançado",
        "topic": "Funções Avançadas (4 pontos)",
        "icon": '<i class="fa-solid fa-bolt"></i>',
        "description": '<i class="fa-solid fa-bolt"></i> Crie uma função recursiva que calcula o fatorial de n.',
        "starter_code": "def fatorial(n):\n    ",
        "tip": 'return 1 if n==0 else n*fatorial(n-1)',
        "validator": lambda code: validator_contains(code, "fatorial") and validator_contains(code, "return"),
        "points": 4,
    },
    {
        "id": "ava-func-5",
        "level": "Avançado",
        "topic": "Funções Avançadas (4 pontos)",
        "icon": '<i class="fa-solid fa-bolt"></i>',
        "description": '<i class="fa-solid fa-bolt"></i> Crie uma função que recebe número variável de argumentos e retorna a soma.',
        "starter_code": "def soma(*args):\n    ",
        "tip": 'return sum(args)',
        "validator": lambda code: validator_contains(code, "*args") and validator_contains(code, "sum"),
        "points": 4,
    },
]