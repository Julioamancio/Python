from challenges_utils import validator_print, validator_var, validator_input_print, validator_contains
from challenges_utils import robust_validator
CHALLENGES_INTERMEDIARIOS = [
    # ========================
    # Listas (2 pontos)
    # ========================
    {
        "id": "int-lista-1",
        "level": "Intermediário",
        "topic": "Listas (2 pontos)",
        "icon": '<i class="fa-solid fa-list"></i>',
        "description": '<i class="fa-solid fa-list"></i> Crie uma lista chamada frutas com os valores "maçã", "banana" e "uva". Mostre a lista.',
        "starter_code": "frutas = \nprint()",
        "tip": 'frutas = ["maçã", "banana", "uva"]',
        "validator": lambda code: validator_print(code, "maçã") and validator_print(code, "banana") and validator_print(code, "uva"),
        "points": 2,
    },
    {
        "id": "int-lista-2",
        "level": "Intermediário",
        "topic": "Listas (2 pontos)",
        "icon": '<i class="fa-solid fa-list-ol"></i>',
        "description": '<i class="fa-solid fa-list-ol"></i> Mostre o último elemento da lista numeros = [10, 20, 30, 40].',
        "starter_code": "numeros = [10, 20, 30, 40]\nprint()",
        "tip": 'print(numeros[-1])',
        "validator": lambda code: validator_print(code, "40"),
        "points": 2,
    },
    {
        "id": "int-lista-3",
        "level": "Intermediário",
        "topic": "Listas (2 pontos)",
        "icon": '<i class="fa-solid fa-list-check"></i>',
        "description": '<i class="fa-solid fa-list-check"></i> Adicione o número 50 à lista numeros = [10, 20, 30, 40] e mostre.',
        "starter_code": "numeros = [10, 20, 30, 40]\nnumeros.append()\nprint()",
        "tip": 'numeros.append(50)',
        "validator": lambda code: validator_print(code, "50"),
        "points": 2,
    },
    {
        "id": "int-lista-4",
        "level": "Intermediário",
        "topic": "Listas (2 pontos)",
        "icon": '<i class="fa-solid fa-list"></i>',
        "description": '<i class="fa-solid fa-list"></i> Remova o valor 20 da lista numeros = [10, 20, 30, 40] e mostre.',
        "starter_code": "numeros = [10, 20, 30, 40]\nnumeros.remove()\nprint()",
        "tip": 'numeros.remove(20)',
        "validator": lambda code: validator_print(code, "10") and not validator_print(code, "20")[0],
        "points": 2,
    },
    {
        "id": "int-lista-5",
        "level": "Intermediário",
        "topic": "Listas (2 pontos)",
        "icon": '<i class="fa-solid fa-list-ul"></i>',
        "description": '<i class="fa-solid fa-list-ul"></i> Some todos os valores da lista numeros = [1, 2, 3, 4, 5] e mostre.',
        "starter_code": "numeros = [1, 2, 3, 4, 5]\nprint()",
        "tip": 'print(sum(numeros))',
        "validator": lambda code: validator_print(code, "15"),
        "points": 2,
    },

    # ========================
    # Strings (2 pontos)
    # ========================
    {
        "id": "int-str-1",
        "level": "Intermediário",
        "topic": "Strings (2 pontos)",
        "icon": '<i class="fa-solid fa-font"></i>',
        "description": '<i class="fa-solid fa-font"></i> Mostre a quantidade de letras da string texto = "Python".',
        "starter_code": "texto = 'Python'\nprint()",
        "tip": 'print(len(texto))',
        "validator": lambda code: validator_print(code, "6"),
        "points": 2,
    },
    {
        "id": "int-str-2",
        "level": "Intermediário",
        "topic": "Strings (2 pontos)",
        "icon": '<i class="fa-solid fa-text-width"></i>',
        "description": '<i class="fa-solid fa-text-width"></i> Mostre o texto "python" em maiúsculas.',
        "starter_code": "texto = 'python'\nprint()",
        "tip": 'print(texto.upper())',
        "validator": lambda code: validator_print(code, "PYTHON"),
        "points": 2,
    },
    {
        "id": "int-str-3",
        "level": "Intermediário",
        "topic": "Strings (2 pontos)",
        "icon": '<i class="fa-solid fa-scissors"></i>',
        "description": '<i class="fa-solid fa-scissors"></i> Mostre os 3 primeiros caracteres da string texto = "abcdef".',
        "starter_code": "texto = 'abcdef'\nprint()",
        "tip": 'print(texto[:3])',
        "validator": lambda code: validator_print(code, "abc"),
        "points": 2,
    },
    {
        "id": "int-str-4",
        "level": "Intermediário",
        "topic": "Strings (2 pontos)",
        "icon": '<i class="fa-solid fa-underline"></i>',
        "description": '<i class="fa-solid fa-underline"></i> Substitua "a" por "o" na string texto = "banana" e mostre.',
        "starter_code": "texto = 'banana'\nprint()",
        "tip": 'print(texto.replace("a", "o"))',
        "validator": lambda code: validator_print(code, "bonono"),
        "points": 2,
    },
    {
        "id": "int-str-5",
        "level": "Intermediário",
        "topic": "Strings (2 pontos)",
        "icon": '<i class="fa-solid fa-arrows-turn-to-dots"></i>',
        "description": '<i class="fa-solid fa-arrows-turn-to-dots"></i> Peça um texto e mostre quantas vezes a letra "a" aparece.',
        "starter_code": "texto = input()\nprint()",
        "tip": 'print(texto.count("a"))',
        "validator": lambda code: validator_input_print(code, "abacaxi\n", "2"),
        "points": 2,
    },

    # ========================
    # Dicionários (2 pontos)
    # ========================
    {
        "id": "int-dict-1",
        "level": "Intermediário",
        "topic": "Dicionários (2 pontos)",
        "icon": '<i class="fa-solid fa-book"></i>',
        "description": '<i class="fa-solid fa-book"></i> Crie um dicionário pessoa com nome "Ana" e idade 20. Mostre o dicionário.',
        "starter_code": "pessoa = \nprint()",
        "tip": 'pessoa = {"nome": "Ana", "idade": 20}',
        "validator": lambda code: validator_print(code, "Ana") and validator_print(code, "20"),
        "points": 2,
    },
    {
        "id": "int-dict-2",
        "level": "Intermediário",
        "topic": "Dicionários (2 pontos)",
        "icon": '<i class="fa-solid fa-user"></i>',
        "description": '<i class="fa-solid fa-user"></i> Mostre o valor da chave "nome" do dicionário pessoa={"nome":"João","idade":30}.',
        "starter_code": "pessoa = {'nome':'João','idade':30}\nprint()",
        "tip": 'print(pessoa["nome"])',
        "validator": lambda code: validator_print(code, "João"),
        "points": 2,
    },
    {
        "id": "int-dict-3",
        "level": "Intermediário",
        "topic": "Dicionários (2 pontos)",
        "icon": '<i class="fa-solid fa-plus"></i>',
        "description": '<i class="fa-solid fa-plus"></i> Adicione a chave "cidade":"SP" ao dicionário pessoa e mostre.',
        "starter_code": "pessoa = {'nome':'Ana','idade':20}\npessoa['cidade'] = \nprint()",
        "tip": 'pessoa["cidade"] = "SP"',
        "validator": lambda code: validator_print(code, "cidade") and validator_print(code, "SP"),
        "points": 2,
    },
    {
        "id": "int-dict-4",
        "level": "Intermediário",
        "topic": "Dicionários (2 pontos)",
        "icon": '<i class="fa-solid fa-minus"></i>',
        "description": '<i class="fa-solid fa-minus"></i> Remova a chave "idade" do dicionário pessoa={"nome":"Ana","idade":20} e mostre.',
        "starter_code": "pessoa = {'nome':'Ana','idade':20}\npessoa.pop()\nprint()",
        "tip": 'pessoa.pop("idade")',
        "validator": lambda code: validator_print(code, "Ana") and not validator_print(code, "20")[0],
        "points": 2,
    },
    {
        "id": "int-dict-5",
        "level": "Intermediário",
        "topic": "Dicionários (2 pontos)",
        "icon": '<i class="fa-solid fa-circle-question"></i>',
        "description": '<i class="fa-solid fa-circle-question"></i> Mostre todas as chaves do dicionário pessoa={"nome":"Ana","idade":20}.',
        "starter_code": "pessoa = {'nome':'Ana','idade':20}\nprint()",
        "tip": 'print(pessoa.keys())',
        "validator": lambda code: validator_print(code, "nome") and validator_print(code, "idade"),
        "points": 2,
    },

    # ========================
    # Laços (2 pontos)
    # ========================
    {
        "id": "int-laco-1",
        "level": "Intermediário",
        "topic": "Laços (2 pontos)",
        "icon": '<i class="fa-solid fa-rotate"></i>',
        "description": '<i class="fa-solid fa-rotate"></i> Imprima todos os itens da lista numeros = [3, 6, 9] usando um for.',
        "starter_code": "numeros = [3,6,9]\nfor n in numeros:\n    print()",
        "tip": 'print(n)',
        "validator": lambda code: validator_print(code, "3") and validator_print(code, "6") and validator_print(code, "9"),
        "points": 2,
    },
    {
        "id": "int-laco-2",
        "level": "Intermediário",
        "topic": "Laços (2 pontos)",
        "icon": '<i class="fa-solid fa-arrow-rotate-right"></i>',
        "description": '<i class="fa-solid fa-arrow-rotate-right"></i> Some os valores da lista numeros = [1,2,3,4] usando um laço.',
        "starter_code": "numeros = [1,2,3,4]\nsoma = 0\nfor n in numeros:\n    soma += n\nprint()",
        "tip": 'print(soma)',
        "validator": lambda code: validator_print(code, "10"),
        "points": 2,
    },
    {
        "id": "int-laco-3",
        "level": "Intermediário",
        "topic": "Laços (2 pontos)",
        "icon": '<i class="fa-solid fa-arrow-rotate-left"></i>',
        "description": '<i class="fa-solid fa-arrow-rotate-left"></i> Conte quantos pares existem na lista numeros = [2,3,4,5,6].',
        "starter_code": "numeros = [2,3,4,5,6]\ncont = 0\nfor n in numeros:\n    if n % 2 == 0:\n        cont += 1\nprint()",
        "tip": 'print(cont)',
        "validator": lambda code: validator_print(code, "3"),
        "points": 2,
    },
    {
        "id": "int-laco-4",
        "level": "Intermediário",
        "topic": "Laços (2 pontos)",
        "icon": '<i class="fa-solid fa-circle-arrow-right"></i>',
        "description": '<i class="fa-solid fa-circle-arrow-right"></i> Imprima números de 10 até 1 (decrescente).',
        "starter_code": "for i in range(10,0,-1):\n    print()",
        "tip": 'print(i)',
        "validator": lambda code: validator_print(code, "10") and validator_print(code, "1"),
        "points": 2,
    },
    {
        "id": "int-laco-5",
        "level": "Intermediário",
        "topic": "Laços (2 pontos)",
        "icon": '<i class="fa-solid fa-circle-arrow-left"></i>',
        "description": '<i class="fa-solid fa-circle-arrow-left"></i> Peça 3 nomes e mostre todos em uma lista.',
        "starter_code": "nomes = []\nfor _ in range(3):\n    nome = input()\n    nomes.append(nome)\nprint()",
        "tip": 'print(nomes)',
        "validator": lambda code: validator_input_print(code, "Ana\nBia\nLeo\n", "Ana") and validator_input_print(code, "Ana\nBia\nLeo\n", "Bia") and validator_input_print(code, "Ana\nBia\nLeo\n", "Leo"),
        "points": 2,
    },

    # ========================
    # Funções (3 pontos)
    # ========================
    {
        "id": "int-funcao-1",
        "level": "Intermediário",
        "topic": "Funções (3 pontos)",
        "icon": '<i class="fa-solid fa-bolt"></i>',
        "description": '<i class="fa-solid fa-bolt"></i> Crie uma função que recebe uma lista e retorna a soma dos elementos.',
        "starter_code": "def soma_lista(lista):\n    ",
        "tip": 'return sum(lista)',
        "validator": lambda code: validator_var(code + "\nres = soma_lista([1,2,3])", "res", 6),
        "points": 3,
    },
    {
        "id": "int-funcao-2",
        "level": "Intermediário",
        "topic": "Funções (3 pontos)",
        "icon": '<i class="fa-solid fa-bolt"></i>',
        "description": '<i class="fa-solid fa-bolt"></i> Crie uma função que recebe um texto e retorna True se é palíndromo.',
        "starter_code": "def eh_palindromo(txt):\n    ",
        "tip": 'return txt == txt[::-1]',
        "validator": lambda code: validator_var(code + "\nres = eh_palindromo('ovo')", "res", True),
        "points": 3,
    },
    {
        "id": "int-funcao-3",
        "level": "Intermediário",
        "topic": "Funções (3 pontos)",
        "icon": '<i class="fa-solid fa-bolt"></i>',
        "description": '<i class="fa-solid fa-bolt"></i> Crie uma função que retorna a média de uma lista de números.',
        "starter_code": "def media(lista):\n    ",
        "tip": 'return sum(lista)/len(lista)',
        "validator": lambda code: validator_var(code + "\nres = media([2,4,6])", "res", 4.0),
        "points": 3,
    },
    {
        "id": "int-funcao-4",
        "level": "Intermediário",
        "topic": "Funções (3 pontos)",
        "icon": '<i class="fa-solid fa-bolt"></i>',
        "description": '<i class="fa-solid fa-bolt"></i> Crie uma função que recebe dois números e retorna o maior.',
        "starter_code": "def maior(a, b):\n    ",
        "tip": 'return max(a, b)',
        "validator": lambda code: validator_var(code + "\nres = maior(2,5)", "res", 5),
        "points": 3,
    },
    {
        "id": "int-funcao-5",
        "level": "Intermediário",
        "topic": "Funções (3 pontos)",
        "icon": '<i class="fa-solid fa-bolt"></i>',
        "description": '<i class="fa-solid fa-bolt"></i> Crie uma função que retorna a quantidade de itens de uma lista.',
        "starter_code": "def tamanho(lista):\n    ",
        "tip": 'return len(lista)',
        "validator": lambda code: validator_var(code + "\nres = tamanho([1,2,3,4])", "res", 4),
        "points": 3,
    },
]